# generated by patch-package 6.4.14
#
# declared package:
#   @google-cloud/functions-framework: 3.1.2
#
diff --git a/node_modules/@google-cloud/functions-framework/build/src/main.js b/node_modules/@google-cloud/functions-framework/build/src/main.js
index 1ea3ea6..8acdcd5 100755
--- a/node_modules/@google-cloud/functions-framework/build/src/main.js
+++ b/node_modules/@google-cloud/functions-framework/build/src/main.js
@@ -44,7 +44,7 @@ const main = async () => {
         server
             .listen(options.port, () => {
             errorHandler.register();
-            if (process.env.NODE_ENV !== 'production') {
+            if (process.env.NODE_ENV !== 'production' && !options.quiet) {
                 console.log('Serving function...');
                 console.log(`Function: ${options.target}`);
                 console.log(`Signature type: ${signatureType}`);
diff --git a/node_modules/@google-cloud/functions-framework/build/src/options.d.ts b/node_modules/@google-cloud/functions-framework/build/src/options.d.ts
index f807f0f..2d5df7f 100644
--- a/node_modules/@google-cloud/functions-framework/build/src/options.d.ts
+++ b/node_modules/@google-cloud/functions-framework/build/src/options.d.ts
@@ -9,6 +9,10 @@ export declare class OptionsError extends Error {
  * the framework.
  */
 export interface FrameworkOptions {
+    /**
+     * Whether to suppress logging output or not.
+     */
+    quiet: boolean;
     /**
      * The port on which this server listens to all HTTP requests.
      */
diff --git a/node_modules/@google-cloud/functions-framework/build/src/options.js b/node_modules/@google-cloud/functions-framework/build/src/options.js
index ba1e639..c583bab 100644
--- a/node_modules/@google-cloud/functions-framework/build/src/options.js
+++ b/node_modules/@google-cloud/functions-framework/build/src/options.js
@@ -56,6 +56,7 @@ class ConfigurableOption {
         return this.validator(cliArgs[this.cliOption] || envVars[this.envVar] || this.defaultValue);
     }
 }
+const QuietOption = new ConfigurableOption('quiet', 'QUIET', false)
 const PortOption = new ConfigurableOption('port', 'PORT', '8080');
 const FunctionTargetOption = new ConfigurableOption('target', 'FUNCTION_TARGET', 'function');
 const SourceLocationOption = new ConfigurableOption('source', 'FUNCTION_SOURCE', '', path_1.resolve);
@@ -78,6 +79,9 @@ Documentation:
  */
 const parseOptions = (cliArgs = process.argv, envVars = process.env) => {
     const argv = minimist(cliArgs, {
+        boolean: [
+            QuietOption.cliOption,
+        ],
         string: [
             PortOption.cliOption,
             FunctionTargetOption.cliOption,
@@ -86,6 +90,7 @@ const parseOptions = (cliArgs = process.argv, envVars = process.env) => {
         ],
     });
     return {
+        quiet: QuietOption.parse(argv, envVars),
         port: PortOption.parse(argv, envVars),
         target: FunctionTargetOption.parse(argv, envVars),
         sourceLocation: SourceLocationOption.parse(argv, envVars),
